<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trolleySchiene</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = false

dir = 0 //0 = left | 1 = right
Frametrap = 0
posSet = false

speedOverall = 4
size = 0.1

reachedHorizon = false

//Ãœber Horizon geboren
if y &lt;= trolleyHorizon.y
{
vspeed = speedOverall
horiOffset = 0
hugel = false
}
//Unter Horizon geboren
else if y &gt; trolleyHorizon.y
{
vspeed = -speedOverall
horiOffset = y - trolleyHorizon.y
hugel = true
}


strecke = (room_height-ystart) +(horiOffset*2)
streckeTraveled = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Frametrap += 1
if Frametrap = 2
{
visible = true
Frametrap = 0
}



/*
if reachedHorizon = false
{
image_angle = 90
}
else
{
image_angle = point_direction(pillarMaker.x,pillarMaker.y,x,y)-180
}
*/
image_angle = point_direction(pillarMaker.x,pillarMaker.y,x,y)-180

//Initial Dir = Up (OVER THE HILL)
if hugel = true
&amp;&amp; y &lt; trolleyHorizon.y
{
vspeed = speedOverall
reachedHorizon = true
}


streckeTraveled += speedOverall
size = (streckeTraveled / strecke) *1.2


image_xscale = size
image_yscale = size

xOffset = (streckeTraveled / strecke)*32

if dir = -1
{
x = (xstart-xOffset)
}
else if dir = 1
{
x = (xstart+xOffset)
}



if trolleyFront.phase = 1
{
//image_angle = point_direction(pillarMaker.x,pillarMaker.y,x,y)-180
}






//Setzt Player Trolley auf seine Position
if y &gt; 555 &amp;&amp; dir = 0 &amp;&amp; posSet = false
{

normalOffset = pillarMaker.x-x



if x+35 &gt; pillarMaker.x+6
{
//hAdjust = (x+35)-pillarMaker.x
hAdjust = -15
}

else if x+35 &lt; pillarMaker.x-6
{
//hAdjust = pillarMaker.x-(x+35)
hAdjust = 15
}

else
{
hAdjust = 0
}


trolleyFront.x = lerp(trolleyFront.x,x+35+hAdjust,0.5)

//trolleyFront.x = x+35+hAdjust
//trolleyFront.image_angle = image_angle-90
posSet = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
/*
draw_text(x+100,y,streckeTraveled)
draw_text(x+100,y+50,"Strecke: "+string(strecke))
draw_text(x+100,y+100,"Offset "+string(horiOffset))
draw_text(x+100,y+150,"Hugel"+string(hugel))

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
